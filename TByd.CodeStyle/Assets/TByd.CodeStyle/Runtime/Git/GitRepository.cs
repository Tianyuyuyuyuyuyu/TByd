using System;
using System.IO;
using UnityEngine;
using TByd.CodeStyle.Runtime.Config;

namespace TByd.CodeStyle.Runtime.Git
{
    /// <summary>
    /// Git仓库管理类，用于检测和管理Git仓库
    /// </summary>
    public class GitRepository
    {
        // Git目录名
        private const string c_GitDirName = ".git";

        // 钩子目录名
        private const string c_HooksDirName = "hooks";

        // 仓库路径
        private string m_RepositoryPath;

        // Git目录路径
        private string m_GitDirPath;

        // 钩子目录路径
        private string m_HooksDirPath;

        // 是否是有效的Git仓库
        private bool m_IsValid;

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="_repositoryPath">仓库路径</param>
        public GitRepository(string _repositoryPath)
        {
            Initialize(_repositoryPath);
        }

        /// <summary>
        /// 初始化
        /// </summary>
        /// <param name="_repositoryPath">仓库路径</param>
        private void Initialize(string _repositoryPath)
        {
            m_RepositoryPath = _repositoryPath;
            m_GitDirPath = Path.Combine(m_RepositoryPath, c_GitDirName);
            m_HooksDirPath = Path.Combine(m_GitDirPath, c_HooksDirName);

            // 检查是否是有效的Git仓库
            m_IsValid = Directory.Exists(m_GitDirPath) && Directory.Exists(m_HooksDirPath);

            if (!m_IsValid)
            {
                Debug.LogWarning($"[TByd.CodeStyle] 路径不是有效的Git仓库: {m_RepositoryPath}");
            }
        }

        /// <summary>
        /// 仓库路径
        /// </summary>
        public string RepositoryPath => m_RepositoryPath;

        /// <summary>
        /// Git目录路径
        /// </summary>
        public string GitDirPath => m_GitDirPath;

        /// <summary>
        /// 钩子目录路径
        /// </summary>
        public string HooksDirPath => m_HooksDirPath;

        /// <summary>
        /// 是否是有效的Git仓库
        /// </summary>
        public bool IsValid => m_IsValid;

        /// <summary>
        /// 获取钩子文件路径
        /// </summary>
        /// <param name="_hookName">钩子名称</param>
        /// <returns>钩子文件路径</returns>
        public string GetHookPath(string _hookName)
        {
            return Path.Combine(m_HooksDirPath, _hookName);
        }

        /// <summary>
        /// 检查钩子是否存在
        /// </summary>
        /// <param name="_hookName">钩子名称</param>
        /// <returns>是否存在</returns>
        public bool HookExists(string _hookName)
        {
            if (!m_IsValid)
                return false;

            return File.Exists(GetHookPath(_hookName));
        }

        /// <summary>
        /// 检查钩子是否由TByd.CodeStyle管理
        /// </summary>
        /// <param name="_hookName">钩子名称</param>
        /// <returns>是否由TByd.CodeStyle管理</returns>
        public bool IsManagedHook(string _hookName)
        {
            if (!HookExists(_hookName))
                return false;

            try
            {
                string content = File.ReadAllText(GetHookPath(_hookName));
                return content.Contains("# Generated by TByd.CodeStyle");
            }
            catch (Exception e)
            {
                Debug.LogError($"[TByd.CodeStyle] 读取钩子文件失败: {e.Message}");
                return false;
            }
        }

        /// <summary>
        /// 获取Git可执行文件路径
        /// </summary>
        /// <returns>Git可执行文件路径</returns>
        public static string GetGitExecutablePath()
        {
            // 在Windows上，通常是git.exe
            if (Application.platform == RuntimePlatform.WindowsEditor)
            {
                return "git.exe";
            }

            // 在macOS和Linux上，通常是git
            return "git";
        }

        /// <summary>
        /// 获取Git仓库路径
        /// </summary>
        /// <returns>Git仓库路径</returns>
        private static string GetGitRepositoryPath()
        {
            // 获取配置
            CodeStyleConfig config = null;

            try
            {
                config = ConfigManager.GetConfig();
            }
            catch (Exception)
            {
                // 配置未初始化，使用默认路径
            }

            // 如果配置了自定义路径且不为空，则使用自定义路径
            if (config != null && !string.IsNullOrEmpty(config.CustomGitRepositoryPath))
            {
                return config.CustomGitRepositoryPath;
            }

            // 否则使用Unity项目根目录
            return Path.GetDirectoryName(Application.dataPath);
        }

        /// <summary>
        /// 检测是否是Git仓库
        /// </summary>
        /// <param name="_path">路径</param>
        /// <returns>是否是Git仓库</returns>
        public static bool IsGitRepository(string _path)
        {
            if (string.IsNullOrEmpty(_path))
                return false;

            string gitDirPath = Path.Combine(_path, c_GitDirName);
            return Directory.Exists(gitDirPath);
        }

        /// <summary>
        /// 检测项目根目录是否是Git仓库
        /// </summary>
        /// <returns>是否是Git仓库</returns>
        public static bool IsProjectGitRepository()
        {
            string repositoryPath = GetGitRepositoryPath();
            return IsGitRepository(repositoryPath);
        }

        /// <summary>
        /// 获取项目Git仓库
        /// </summary>
        /// <returns>Git仓库</returns>
        public static GitRepository GetProjectRepository()
        {
            string repositoryPath = GetGitRepositoryPath();
            return new GitRepository(repositoryPath);
        }

        /// <summary>
        /// 获取Git目录路径
        /// </summary>
        /// <param name="_repositoryPath">仓库路径</param>
        /// <returns>Git目录路径，如果不是Git仓库则返回空字符串</returns>
        public static string GetGitDirectory(string _repositoryPath)
        {
            if (string.IsNullOrEmpty(_repositoryPath))
                return string.Empty;

            string gitDirPath = Path.Combine(_repositoryPath, c_GitDirName);
            return Directory.Exists(gitDirPath) ? gitDirPath : string.Empty;
        }

        /// <summary>
        /// 获取Git钩子目录路径
        /// </summary>
        /// <param name="_repositoryPath">仓库路径</param>
        /// <returns>钩子目录路径，如果不是Git仓库则返回空字符串</returns>
        public static string GetHooksDirectory(string _repositoryPath)
        {
            string gitDirPath = GetGitDirectory(_repositoryPath);
            if (string.IsNullOrEmpty(gitDirPath))
                return string.Empty;

            string hooksDirPath = Path.Combine(gitDirPath, c_HooksDirName);
            return Directory.Exists(hooksDirPath) ? hooksDirPath : string.Empty;
        }
    }
}
